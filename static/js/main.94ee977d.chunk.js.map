{"version":3,"sources":["Components/Feedback/Section.js","Components/Feedback/FeedbackOptions.js","Components/Feedback/Statistics.js","Components/Feedback/Notification.js","App.js","index.js"],"names":["Section","children","className","FeedbackOptions","options","onLeaveFeedback","ButtonGroup","aria-label","Object","keys","map","key","Button","name","onClick","e","currentTarget","Statistics","stats","total","positivePercentage","entries","entry","Notification","message","App","state","good","neutral","bad","handleChangeStats","setState","prev","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAUeA,EARC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,yBAASC,UAAU,UAAnB,SAA8BD,K,gBCqBjBE,EApBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,cAACC,EAAA,EAAD,CAAaC,aAAW,yBAAxB,SACGC,OAAOC,KAAKL,GAASM,KAAI,SAACC,GAAD,OACxB,cAACC,EAAA,EAAD,CAEEC,KAAMF,EACNG,QAAS,SAACC,GAAD,OAAOV,EAAgBU,EAAEC,cAAcH,OAHlD,SAKGF,GAJIA,SCaAM,EApBI,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAClC,OACE,sBAAKlB,UAAU,aAAf,UACGM,OAAOa,QAAQH,GAAOR,KAAI,SAACY,GAAD,OACzB,8BACE,uBAAMpB,UAAU,YAAhB,UAA6BoB,EAAM,GAAnC,OADF,IACkDA,EAAM,KADhDA,EAAM,OAIhB,wCAAWH,KACX,oDAAuBC,EAAvB,WCHSG,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCqD3BC,G,kNA7CbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,kBAAoB,SAACjB,GACnB,EAAKkB,UAAS,SAACC,GAAD,sBACXnB,EAAOmB,EAAKnB,GAAQ,O,EAIzBoB,mBAAqB,WACnB,MAA+B,EAAKP,MAEpC,OAFA,EAAQC,KAAR,EAAcC,QAAd,EAAuBC,K,EAKzBK,gCAAkC,WAChC,IAAQP,EAAS,EAAKD,MAAdC,KACR,OAAOA,EAAOQ,KAAKC,MAAOT,EAAO,EAAKM,qBAAwB,KAAO,G,4CAGvE,WACE,OACE,eAAC,EAAD,WACE,4DACA,cAAC,EAAD,CACE7B,QAASiC,KAAKX,MACdrB,gBAAiBgC,KAAKP,oBAErBO,KAAKJ,qBACN,cAAC,EAAD,CACEf,MAAOmB,KAAKX,MACZP,MAAOkB,KAAKJ,qBACZb,mBAAoBiB,KAAKH,oCAG3B,cAAC,EAAD,CAAcV,QAAQ,2B,GAvCdc,cCLlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.94ee977d.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst Section = ({ children }) => (\n  <section className=\"Section\">{children}</section>\n);\n\nSection.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ButtonGroup aria-label=\"outlined  button group\">\n      {Object.keys(options).map((key) => (\n        <Button\n          key={key}\n          name={key}\n          onClick={(e) => onLeaveFeedback(e.currentTarget.name)}\n        >\n          {key}\n        </Button>\n      ))}\n    </ButtonGroup>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\n\nconst Statistics = ({ stats, total, positivePercentage }) => {\n  return (\n    <div className=\"Statistics\">\n      {Object.entries(stats).map((entry) => (\n        <p key={entry[0]}>\n          <span className=\"StateName\">{entry[0]}:</span> {entry[1]}\n        </p>\n      ))}\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  stats: PropTypes.objectOf(PropTypes.number.isRequired),\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { Component } from \"react\";\n\n//Components\nimport Section from \"./Components/Feedback/Section\";\nimport FeedbackOptions from \"./Components/Feedback/FeedbackOptions\";\nimport Statistics from \"./Components/Feedback/Statistics\";\nimport Notification from \"./Components/Feedback/Notification\";\nimport \"./Components/Feedback/styles.css\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleChangeStats = (name) => {\n    this.setState((prev) => ({\n      [name]: prev[name] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return good ? Math.floor((good / this.countTotalFeedback()) * 100) : 0;\n  };\n\n  render() {\n    return (\n      <Section>\n        <h3>PLEASE LEAVE YOUR FEEDBACK</h3>\n        <FeedbackOptions\n          options={this.state}\n          onLeaveFeedback={this.handleChangeStats}\n        />\n        {!!this.countTotalFeedback() ? (\n          <Statistics\n            stats={this.state}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback yet\" />\n        )}\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}